<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:behaviors="clr-namespace:HotelManager.UI.Behaviors"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:styles="clr-namespace:HotelManager.UI.Styles">

    <!-- Стиль окна в материальном дизайне с настраиваемым заголовком -->
    <Style
        x:Key="MaterialDesignWindow"
        BasedOn="{StaticResource {x:Type Window}}"
        TargetType="Window">
        <Style.Resources>
            <ResourceDictionary>
                <ResourceDictionary.MergedDictionaries>
                    <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml"/>
                </ResourceDictionary.MergedDictionaries>
                <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            </ResourceDictionary>
        </Style.Resources>

        <Setter Property="WindowStyle" Value="SingleBorderWindow"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <!-- WindowChrome описывает настройки неклиентской области окна -->
                <!-- https://docs.microsoft.com/ru-ru/dotnet/api/system.windows.shell.windowchrome -->
                <WindowChrome
                    GlassFrameThickness="3"
                    NonClientFrameEdges="None"
                    ResizeBorderThickness="5"/>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>

        <!-- Шаблон -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Window">

                    <!-- Рамка окна -->
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Border.Style>
                            <!-- Настройка ширины рамки -->
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Value="Maximized">
                                        <Setter Property="BorderThickness" Value="7"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>

                        <!-- Основной Grid -->
                        <Grid>
                            <Grid.RowDefinitions>
                                <!-- Заголовок окна -->
                                <RowDefinition Height="Auto"/>
                                <!-- Содержимое окна -->
                                <RowDefinition/>
                            </Grid.RowDefinitions>

                            <!-- Заголовок окна -->
                            <md:ColorZone
                                x:Name="TitleColorZone"
                                Grid.Row="0"
                                Padding="8"
                                md:ShadowAssist.ShadowDepth="Depth2"
                                Mode="PrimaryDark">

                                <!-- По двойному клику на заголовок окно либо раворачивается, либо восстанавливает исходный размер -->
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MouseDoubleClick">
                                        <i:InvokeCommandAction Command="{x:Static styles:MaterialDesignWindow.ToggleMaximize}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>

                                <!-- Поведение окна -->
                                <i:Interaction.Behaviors>
                                    <!-- Перетаскивание окна -->
                                    <behaviors:DragWindowBehavior/>

                                    <!-- Привязка WindowChrome.CaptionHeight к ActualHeight окна -->
                                    <!-- Используется вспомогательный класс, так как ActualHeight не является свойством зависимостей -->
                                    <behaviors:TemplateBindingBehavior SourceProperty="ActualHeight" TargetTemplatePropertyPath="(WindowChrome.WindowChrome).(WindowChrome.CaptionHeight)"/>
                                </i:Interaction.Behaviors>

                                <md:ColorZone.Style>
                                    <!-- Если WindowStyle окна равен None — заголовок не отображается -->
                                    <Style TargetType="{x:Type md:ColorZone}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding WindowStyle, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Value="None">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </md:ColorZone.Style>

                                <Grid>
                                    <!-- ContentControl выводящий в заголовок HeaderContent -->
                                    <ContentControl
                                        x:Name="HeaderContent"
                                        Content="{Binding Path=(styles:MaterialDesignWindow.HeaderContent), RelativeSource={RelativeSource TemplatedParent}}"
                                        FontSize="22">
                                        <ContentControl.Style>
                                            <Style TargetType="ContentControl">
                                                <Style.Triggers>
                                                    <Trigger Property="Content" Value="{x:Null}">
                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ContentControl.Style>
                                    </ContentControl>

                                    <!-- Данный TextBlock отображается, когда HeaderContent не задан и выводит Title окна -->
                                    <TextBlock
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        FontSize="22"
                                        Text="{TemplateBinding Title}">
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=(styles:MaterialDesignWindow.HeaderContent), RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>

                                    <!-- Иконка -->
                                    <!--<Image
                                        MaxHeight="32"
                                        HorizontalAlignment="Left"
                                        Source="{TemplateBinding Icon}"/>-->

                                    <!-- StackPanel с кнопками управления окном -->
                                    <StackPanel
                                        HorizontalAlignment="Right"
                                        Orientation="Horizontal"
                                        WindowChrome.IsHitTestVisibleInChrome="True">
                                        <StackPanel.Resources>

                                            <!-- Стиль взять отсюда и немного переделан -->
                                            <!-- https://github.com/MaterialDesignInXAML/MaterialDesignInXamlToolkit/blob/cf57a29b7f79242de9fbb7c9233ba30642d036d6/MaterialDesignThemes.Wpf/Themes/MaterialDesignTheme.Button.xaml#L132 -->
                                            <Style TargetType="Button">
                                                <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"/>
                                                <Setter Property="Foreground" Value="{DynamicResource SecondaryAccentBrush}"/>
                                                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="BorderBrush" Value="Transparent"/>
                                                <Setter Property="Cursor" Value="Hand"/>
                                                <Setter Property="md:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                                <Setter Property="TextBlock.FontWeight" Value="Medium"/>
                                                <Setter Property="TextBlock.FontSize" Value="14"/>
                                                <Setter Property="BorderThickness" Value="0"/>
                                                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                <Setter Property="VerticalContentAlignment" Value="Center"/>
                                                <Setter Property="Padding" Value="16,4,16,4"/>
                                                <Setter Property="Height" Value="32"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type Button}">
                                                            <Grid>
                                                                <Border
                                                                    x:Name="border"
                                                                    Background="{TemplateBinding Background}"
                                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                                    BorderThickness="{TemplateBinding BorderThickness}"
                                                                    CornerRadius="{Binding Path=(md:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                                                                    <Border.Resources>
                                                                        <SolidColorBrush
                                                                            x:Key="PrimaryHueMidBrush"
                                                                            Opacity="0.16"
                                                                            Color="{DynamicResource PrimaryHueMidBrushColor}"/>
                                                                    </Border.Resources>
                                                                    <md:Ripple
                                                                        Padding="{TemplateBinding Padding}"
                                                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                                        Content="{TemplateBinding Content}"
                                                                        ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                        Focusable="False"
                                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                                                        <md:Ripple.Clip>
                                                                            <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                                                                <Binding ElementName="border" Path="ActualWidth"/>
                                                                                <Binding ElementName="border" Path="ActualHeight"/>
                                                                                <Binding ElementName="border" Path="CornerRadius"/>
                                                                                <Binding ElementName="border" Path="BorderThickness"/>
                                                                            </MultiBinding>
                                                                        </md:Ripple.Clip>
                                                                    </md:Ripple>
                                                                </Border>
                                                            </Grid>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="Button.IsDefaulted" Value="true"/>
                                                                <Trigger Property="IsMouseOver" Value="true">
                                                                    <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                                                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="false">
                                                                    <Setter Property="Opacity" Value="0.23"/>
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </StackPanel.Resources>

                                        <!-- Кнопка сворачивания окна -->
                                        <Button Command="{x:Static styles:MaterialDesignWindow.Minimize}" Visibility="{Binding Path=(behaviors:WindowEx.ShowMinimizeButton), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <md:PackIcon Kind="WindowMinimize"/>
                                        </Button>

                                        <!-- Кнопка разворачивания/воcстановления окна -->
                                        <Button Command="{x:Static styles:MaterialDesignWindow.ToggleMaximize}" Visibility="{Binding Path=(behaviors:WindowEx.ShowMaximizeButton), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <Button.Style>
                                                <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="Button">

                                                    <!-- Замена иконки в зависимости от WindowState -->
                                                    <Setter Property="Content">
                                                        <Setter.Value>
                                                            <md:PackIcon Kind="WindowMaximize"/>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Value="Maximized">
                                                            <Setter Property="Content">
                                                                <Setter.Value>
                                                                    <md:PackIcon Kind="WindowRestore"/>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Button.Style>
                                        </Button>

                                        <!-- Кнопка закрытия окна -->
                                        <Button Command="{x:Static styles:MaterialDesignWindow.Close}">
                                            <md:PackIcon Kind="WindowClose"/>
                                        </Button>
                                    </StackPanel>
                                </Grid>
                            </md:ColorZone>

                            <!-- Отображение заданного Content'а -->
                            <ContentPresenter
                                Grid.Row="1"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"/>

                            <!-- ResizeGrip для растягивания окна -->
                            <!-- По умолчанию скрыт -->
                            <ResizeGrip
                                x:Name="WindowResizeGrip"
                                Grid.Row="1"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Bottom"
                                IsTabStop="False"
                                Visibility="Collapsed"/>
                        </Grid>
                    </Border>

                    <!-- Если у окна ResizeMode равен CanResizeWithGrip, а WindowState равен Normal — ResizeGrip отображается -->
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                                <Condition Property="WindowState" Value="Normal"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>